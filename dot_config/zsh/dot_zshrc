#  zinit {{{ #
if [[ ! -d ${ZINIT[HOME_DIR]} ]]; then
    mkdir -p ${ZINIT[HOME_DIR]}
    git clone https://github.com/zdharma/zinit.git ${ZINIT[HOME_DIR]}
    RELOAD=1 source $ZDOTDIR/.zshrc
else
    source ${ZINIT[BIN_DIR]}/zinit.zsh
    autoload -Uz _zinit
    (( ${+_comps} )) && _comps[zinit]=_zinit
fi

zinit ice wait lucid blockf atpull'zinit creinstall -q .'
zinit light zsh-users/zsh-completions

zinit ice wait lucid
zinit light zdharma/fast-syntax-highlighting

zinit snippet OMZ::lib/completion.zsh

zinit snippet OMZ::lib/key-bindings.zsh

zinit ice wait lucid
zinit snippet OMZ::plugins/colored-man-pages/colored-man-pages.plugin.zsh

zinit ice as"completion"
zinit snippet OMZ::plugins/fd/_fd

zinit ice wait lucid
zinit snippet OMZ::plugins/fzf/fzf.plugin.zsh

zinit ice wait lucid
zinit snippet OMZ::plugins/git/git.plugin.zsh

zinit ice svn as"completion" source"pip.plugin.zsh" pick"_pip" atpull'zinit creinstall -q .'
zinit snippet OMZ::plugins/pip

zinit ice wait lucid
zinit snippet OMZ::plugins/virtualenvwrapper/virtualenvwrapper.plugin.zsh

zinit ice wait lucid
zinit snippet PZT::modules/completion/init.zsh

zinit ice wait lucid
zinit snippet PZT::modules/rsync/init.zsh

# diff-so-fancy
zinit ice wait"2" lucid as"program" pick"bin/git-dsf"
zinit load zdharma/zsh-diff-so-fancy

# Load the pure theme, with zsh-async library that's bundled with it.
export PURE_PROMPT_SYMBOL="$"
export PURE_PROMPT_VICMD_SYMBOL=">>> "
export PURE_GIT_UP_ARROW=">"
export PURE_GIT_DOWN_ARROW="<"
zinit ice pick"async.zsh" src"pure.zsh"
zinit light sindresorhus/pure
#  }}} zinit #

#  Vim mode and bindkeys {{{ #
export KEYTIMEOUT=1

bindkey '^P' up-history
bindkey '^N' down-history
bindkey '^o' vi-cmd-mode
bindkey '^[' vi-cmd-mode

# Use vim keys in tab complete menu:
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history

# Edit line in vim with `V` in normal mode:
autoload -Uz edit-command-line
zle -N edit-command-line
bindkey -M vicmd 'V' edit-command-line
#  }}} Vim mode and bindkeys #

#  auto_ls {{{ #
auto-ls () {
    if [[ -z $BUFFER ]]; then
        zle && echo ""
        ls
        echo ""
        if [[ $(git rev-parse --is-inside-work-tree 2> /dev/null) == true ]]; then
            git status --column=row --short
        fi
        echo ""

        zle && zle redisplay
    else
        zle .$WIDGET
    fi
}
zle -N auto-ls
zle -N accept-line auto-ls
add-zsh-hook chpwd auto-ls
#  }}} auto_ls #

# Fre {{{ #
fre_chpwd() {
  fre --add "$(pwd)"
}
typeset -gaU chpwd_functions
chpwd_functions+=fre_chpwd
# }}} Fre #

#  Completions {{{ #
# set completions directory
completion_dir=$HOME/.local/share/zsh/functions/Completion
if [[ ! -d $completion_dir ]]; then; mkdir -p $completion_dir; fi
fpath=( "$completion_dir" $fpath )

# Add completions
if command -v rustup > /dev/null; then
    if [[ ! -f $completion_dir/_cargo ]]; then
        rustup completions zsh cargo > $completion_dir/_cargo
    fi
    if [[ ! -f $completion_dir/_rustup ]]; then
        rustup completions zsh rustup > $completion_dir/_rustup
    fi
fi
#  }}} Completions #

#  History {{{ #
## History file configuration
[ -z "$HISTFILE" ] && HISTFILE="$HOME/.cache/zsh/history"
[ ! -d $(dirname $HISTFILE) ] && mkdir -p $(dirname $HISTFILE)
HISTSIZE=10000
SAVEHIST=10000

## History command configuration
setopt hist_expire_dups_first # delete duplicates first when HISTFILE size exceeds HISTSIZE
setopt hist_ignore_dups       # ignore duplicated commands history list
setopt hist_ignore_space      # ignore commands that start with space
setopt hist_verify            # show command with history expansion to user before running it
setopt inc_append_history     # add commands to HISTFILE in order of execution
#  }}} History #

#  Finalize - Generate zcompdump if older than 24 hours {{{ #
autoload -Uz compinit
if [[ -n ${ZDOTDIR}/.zcompdump(#qN.mh+24) ]]; then
    compinit;
else
    compinit -C;
fi
#  }}} Finalize - Generate zcompdump if older than 24 hours #

# vim: foldmethod=marker ft=zsh
